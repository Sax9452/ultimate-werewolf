import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { socketService } from '../services/socket';

function LobbySettings({ lobby, isHost }) {
  const [showSettings, setShowSettings] = useState(false);
  const [settings, setSettings] = useState(lobby?.settings || {
    nightDuration: 60,
    dayDuration: 180,
    roleDistribution: {
      '‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô': 1,
      '‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤': 1,
      '‡∏´‡∏°‡∏≠‡∏î‡∏π': 1,
      '‡∏ö‡∏≠‡∏î‡∏µ‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î': 1,
      '‡∏ô‡∏±‡∏Å‡∏•‡πà‡∏≤': 0,
      '‡∏Ñ‡∏¥‡∏ß‡∏õ‡∏¥‡∏î': 0,
      '‡∏•‡∏π‡∏Å‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤': 0,
      '‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏¢‡∏®': 0,
      '‡πÅ‡∏°‡πà‡∏°‡∏î': 0,
      '‡∏ï‡∏±‡∏ß‡∏ï‡∏•‡∏Å': 0,
      '‡∏≠‡∏±‡∏•‡∏ü‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤': 0
    }
  });

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° role
  const roleGroups = [
    {
      name: 'üë• ‡∏ó‡∏µ‡∏°‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô',
      color: 'green',
      roles: ['‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô']
    },
    {
      name: 'üê∫ ‡∏ó‡∏µ‡∏°‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤',
      color: 'red',
      roles: ['‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤', '‡∏≠‡∏±‡∏•‡∏ü‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤', '‡∏•‡∏π‡∏Å‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤', '‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏¢‡∏®']
    },
    {
      name: '‚ú® ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏û‡∏¥‡πÄ‡∏®‡∏© (‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô)',
      color: 'blue',
      roles: ['‡∏´‡∏°‡∏≠‡∏î‡∏π', '‡∏ö‡∏≠‡∏î‡∏µ‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î', '‡πÅ‡∏°‡πà‡∏°‡∏î', '‡∏ô‡∏±‡∏Å‡∏•‡πà‡∏≤']
    },
    {
      name: 'üí´ ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏û‡∏¥‡πÄ‡∏®‡∏© (‡∏≠‡∏∑‡πà‡∏ô‡πÜ)',
      color: 'purple',
      roles: ['‡∏Ñ‡∏¥‡∏ß‡∏õ‡∏¥‡∏î', '‡∏ï‡∏±‡∏ß‡∏ï‡∏•‡∏Å']
    }
  ];

  const roleEmojis = {
    '‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô': 'üë®‚Äçüåæ',
    '‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤': 'üê∫',
    '‡∏≠‡∏±‡∏•‡∏ü‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤': 'üëëüê∫',
    '‡∏•‡∏π‡∏Å‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤': 'üê∫',
    '‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏¢‡∏®': 'üó°Ô∏è',
    '‡∏´‡∏°‡∏≠‡∏î‡∏π': 'üîÆ',
    '‡∏ö‡∏≠‡∏î‡∏µ‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î': 'üõ°Ô∏è',
    '‡πÅ‡∏°‡πà‡∏°‡∏î': 'üßô‚Äç‚ôÄÔ∏è',
    '‡∏ô‡∏±‡∏Å‡∏•‡πà‡∏≤': 'üèπ',
    '‡∏Ñ‡∏¥‡∏ß‡∏õ‡∏¥‡∏î': 'üíò',
    '‡∏ï‡∏±‡∏ß‡∏ï‡∏•‡∏Å': 'ü§°'
  };

  const roleDescriptions = {
    '‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô': '‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ',
    '‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤': '‡∏Ü‡πà‡∏≤‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô',
    '‡∏≠‡∏±‡∏•‡∏ü‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤': '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ü‡πà‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤',
    '‡∏•‡∏π‡∏Å‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤': '‡∏ï‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤‡∏Ü‡πà‡∏≤‡πÑ‡∏î‡πâ 2 ‡∏Ñ‡∏ô',
    '‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏¢‡∏®': '‡∏ù‡∏±‡πà‡∏á‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤ ‡πÅ‡∏ï‡πà‡∏î‡∏π‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô',
    '‡∏´‡∏°‡∏≠‡∏î‡∏π': '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏ô‡∏•‡∏∞‡∏Ñ‡∏ô',
    '‡∏ö‡∏≠‡∏î‡∏µ‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î': '‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏Ñ‡∏ô‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏ô‡∏•‡∏∞‡∏Ñ‡∏ô',
    '‡πÅ‡∏°‡πà‡∏°‡∏î': '‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á/‡∏Ü‡πà‡∏≤ ‡πÑ‡∏î‡πâ‡∏Ñ‡∏ô‡∏•‡∏∞ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
    '‡∏ô‡∏±‡∏Å‡∏•‡πà‡∏≤': '‡∏¢‡∏¥‡∏á‡∏Ñ‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏¢',
    '‡∏Ñ‡∏¥‡∏ß‡∏õ‡∏¥‡∏î': '‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å 2 ‡∏Ñ‡∏ô (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÉ‡∏ô‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏£‡∏Å)',
    '‡∏ï‡∏±‡∏ß‡∏ï‡∏•‡∏Å': '‡∏ä‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏ß‡∏ï‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤'
  };

  const handleRoleChange = (role, value) => {
    let finalValue = Math.max(0, parseInt(value) || 0);
    
    // üîí Alpha Wolf ‡∏°‡∏µ‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà 1 ‡∏ï‡∏±‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if (role === '‡∏≠‡∏±‡∏•‡∏ü‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤') {
      finalValue = Math.min(finalValue, 1);
    }
    
    const newSettings = {
      ...settings,
      roleDistribution: {
        ...settings.roleDistribution,
        [role]: finalValue
      }
    };
    setSettings(newSettings);
  };

  const handleTimeChange = (phase, value) => {
    const newSettings = {
      ...settings,
      [phase]: Math.max(30, parseInt(value) || 30)
    };
    setSettings(newSettings);
  };

  const handleSaveSettings = () => {
    socketService.emit('updateLobbySettings', settings);
    setShowSettings(false);
  };

  const getTotalRoles = () => {
    return Object.entries(settings.roleDistribution)
      .reduce((sum, [_, count]) => sum + count, 0);
  };

  const getWerewolfCount = () => {
    const werewolfRoles = ['‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤', '‡∏≠‡∏±‡∏•‡∏ü‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤', '‡∏•‡∏π‡∏Å‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤'];
    return werewolfRoles.reduce((sum, role) => sum + (settings.roleDistribution[role] || 0), 0);
  };

  const applyPreset = (presetName) => {
    const presets = {
      small: {
        '‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô': 3,
        '‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤': 2,
        '‡∏´‡∏°‡∏≠‡∏î‡∏π': 1,
        '‡∏ö‡∏≠‡∏î‡∏µ‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î': 0,
        '‡∏ô‡∏±‡∏Å‡∏•‡πà‡∏≤': 0,
        '‡∏Ñ‡∏¥‡∏ß‡∏õ‡∏¥‡∏î': 0,
        '‡∏•‡∏π‡∏Å‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤': 0,
        '‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏¢‡∏®': 0,
        '‡πÅ‡∏°‡πà‡∏°‡∏î': 0,
        '‡∏ï‡∏±‡∏ß‡∏ï‡∏•‡∏Å': 0,
        '‡∏≠‡∏±‡∏•‡∏ü‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤': 0
      },
      medium: {
        '‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô': 4,
        '‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤': 2,
        '‡∏´‡∏°‡∏≠‡∏î‡∏π': 1,
        '‡∏ö‡∏≠‡∏î‡∏µ‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î': 1,
        '‡∏ô‡∏±‡∏Å‡∏•‡πà‡∏≤': 1,
        '‡∏Ñ‡∏¥‡∏ß‡∏õ‡∏¥‡∏î': 0,
        '‡∏•‡∏π‡∏Å‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤': 0,
        '‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏¢‡∏®': 0,
        '‡πÅ‡∏°‡πà‡∏°‡∏î': 1,
        '‡∏ï‡∏±‡∏ß‡∏ï‡∏•‡∏Å': 0,
        '‡∏≠‡∏±‡∏•‡∏ü‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤': 0
      },
      large: {
        '‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô': 6,
        '‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤': 2,
        '‡∏≠‡∏±‡∏•‡∏ü‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤': 1,
        '‡∏•‡∏π‡∏Å‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤': 0,
        '‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏¢‡∏®': 1,
        '‡∏´‡∏°‡∏≠‡∏î‡∏π': 1,
        '‡∏ö‡∏≠‡∏î‡∏µ‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î': 1,
        '‡πÅ‡∏°‡πà‡∏°‡∏î': 1,
        '‡∏ô‡∏±‡∏Å‡∏•‡πà‡∏≤': 1,
        '‡∏Ñ‡∏¥‡∏ß‡∏õ‡∏¥‡∏î': 1,
        '‡∏ï‡∏±‡∏ß‡∏ï‡∏•‡∏Å': 0
      }
    };

    if (presets[presetName]) {
      setSettings({
        ...settings,
        roleDistribution: presets[presetName]
      });
    }
  };

  const getWarnings = () => {
    const warnings = [];
    const totalRoles = getTotalRoles();
    const playerCount = lobby?.players.length || 0;
    const werewolfCount = getWerewolfCount();

    if (totalRoles !== playerCount) {
      warnings.push(`‚ö†Ô∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô role (${totalRoles}) ‡πÑ‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (${playerCount})`);
    }
    
    if (werewolfCount === 0) {
      warnings.push('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤‡πÄ‡∏•‡∏¢!');
    } else if (werewolfCount >= totalRoles / 2) {
      warnings.push('‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ! (‡∏Ñ‡∏ß‡∏£‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏£‡∏∂‡πà‡∏á)');
    }

    if (settings.roleDistribution['‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô'] === 0) {
      warnings.push('‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏ô');
    }

    return warnings;
  };

  if (!isHost) return null;

  return (
    <>
      <button
        onClick={() => setShowSettings(true)}
        className="btn btn-secondary text-sm px-4 py-2"
      >
        ‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á
      </button>

      <AnimatePresence>
        {showSettings && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/80 flex items-center justify-center z-50 p-4"
            onClick={() => setShowSettings(false)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-slate-800 rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto p-8 shadow-2xl"
              onClick={(e) => e.stopPropagation()}
            >
              <h2 className="text-3xl font-bold mb-6 bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
                ‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á
              </h2>

              {/* ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ü‡∏™ */}
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-3 text-purple-400">‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ü‡∏™</h3>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm text-slate-300 mb-2">
                      üåô ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
                    </label>
                    <input
                      type="number"
                      min="30"
                      max="300"
                      value={settings.nightDuration}
                      onChange={(e) => handleTimeChange('nightDuration', e.target.value)}
                      className="input"
                    />
                  </div>
                  <div>
                    <label className="block text-sm text-slate-300 mb-2">
                      ‚òÄÔ∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
                    </label>
                    <input
                      type="number"
                      min="30"
                      max="600"
                      value={settings.dayDuration}
                      onChange={(e) => handleTimeChange('dayDuration', e.target.value)}
                      className="input"
                    />
                  </div>
                </div>
              </div>

              {/* Preset Buttons */}
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-3 text-purple-400">
                  üéØ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏î‡πà‡∏ß‡∏ô
                </h3>
                <div className="grid grid-cols-3 gap-3">
                  <button
                    onClick={() => applyPreset('small')}
                    className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-semibold transition-colors"
                  >
                    üéÆ ‡πÄ‡∏Å‡∏°‡πÄ‡∏•‡πá‡∏Å (6 ‡∏Ñ‡∏ô)
                  </button>
                  <button
                    onClick={() => applyPreset('medium')}
                    className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-semibold transition-colors"
                  >
                    üéÆ ‡πÄ‡∏Å‡∏°‡∏Å‡∏•‡∏≤‡∏á (10 ‡∏Ñ‡∏ô)
                  </button>
                  <button
                    onClick={() => applyPreset('large')}
                    className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg font-semibold transition-colors"
                  >
                    üéÆ ‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏ç‡πà (15 ‡∏Ñ‡∏ô)
                  </button>
                </div>
              </div>

              {/* ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡∏∞ Warning */}
              <div className="mb-6">
                <div className="bg-slate-700/50 p-4 rounded-lg space-y-2">
                  <div className="flex justify-between text-sm">
                    <span className="text-slate-300">üë• ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</span>
                    <span className="font-bold text-white">{lobby?.players.length || 0} ‡∏Ñ‡∏ô</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span className="text-slate-300">üé≠ ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</span>
                    <span className={`font-bold ${getTotalRoles() === lobby?.players.length ? 'text-green-400' : 'text-red-400'}`}>
                      {getTotalRoles()} ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
                    </span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span className="text-slate-300">üê∫ ‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</span>
                    <span className="font-bold text-red-400">{getWerewolfCount()} ‡∏ï‡∏±‡∏ß</span>
                  </div>
                </div>

                {/* Warnings */}
                {getWarnings().length > 0 && (
                  <div className="mt-3 space-y-2">
                    {getWarnings().map((warning, idx) => (
                      <div key={idx} className="bg-yellow-900/30 border border-yellow-600/50 text-yellow-200 p-2 rounded text-sm">
                        {warning}
                      </div>
                    ))}
                  </div>
                )}
              </div>

              {/* ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Role ‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏° */}
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-3 text-purple-400">
                  üé≠ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
                </h3>
                
                {roleGroups.map((group, groupIdx) => (
                  <div key={groupIdx} className="mb-4">
                    <div className={`text-sm font-semibold mb-2 ${
                      group.color === 'green' ? 'text-green-400' :
                      group.color === 'red' ? 'text-red-400' :
                      group.color === 'blue' ? 'text-blue-400' :
                      'text-purple-400'
                    }`}>
                      {group.name}
                    </div>
                    <div className="grid gap-2">
                      {group.roles.map((role) => (
                        <div key={role} className={`flex items-center gap-3 p-3 rounded-lg ${
                          group.color === 'green' ? 'bg-green-900/20 border border-green-700/30' :
                          group.color === 'red' ? 'bg-red-900/20 border border-red-700/30' :
                          group.color === 'blue' ? 'bg-blue-900/20 border border-blue-700/30' :
                          'bg-purple-900/20 border border-purple-700/30'
                        }`}>
                          <div className="text-2xl w-10 text-center">{roleEmojis[role]}</div>
                          <div className="flex-1">
                            <div className="font-semibold text-white">{role}</div>
                            <div className="text-xs text-slate-400">{roleDescriptions[role]}</div>
                          </div>
                          <div className="flex items-center gap-2">
                            <button
                              onClick={() => handleRoleChange(role, settings.roleDistribution[role] - 1)}
                              className="w-8 h-8 bg-slate-600 hover:bg-slate-500 rounded flex items-center justify-center text-xl transition-colors"
                            >
                              -
                            </button>
                            <div className="w-12 text-center font-bold text-lg text-white">
                              {settings.roleDistribution[role]}
                            </div>
                            <button
                              onClick={() => handleRoleChange(role, settings.roleDistribution[role] + 1)}
                              className="w-8 h-8 bg-slate-600 hover:bg-slate-500 rounded flex items-center justify-center text-xl transition-colors"
                            >
                              +
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>

              {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
              <div className="flex gap-3">
                <button
                  onClick={handleSaveSettings}
                  disabled={getWarnings().length > 0}
                  className={`flex-1 px-6 py-3 rounded-lg font-bold transition-all ${
                    getWarnings().length > 0
                      ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                      : 'bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white shadow-lg'
                  }`}
                >
                  {getWarnings().length > 0 ? '‚ö†Ô∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å' : '‚úì ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤'}
                </button>
                <button
                  onClick={() => setShowSettings(false)}
                  className="bg-slate-700 hover:bg-slate-600 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
                >
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
}

export default LobbySettings;

