import { useState, useEffect } from 'react';
import { socketService } from '../services/socket';
import { soundManager } from '../utils/sounds';
import { useGameStore } from '../store/gameStore';
import { motion } from 'framer-motion';

function WerewolfChat({ teammates }) {
  const { players, werewolfChatMessages, addWerewolfChatMessage, phase } = useGameStore();
  const [inputMessage, setInputMessage] = useState('');

  // ‚≠ê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const myId = socketService.socket?.id;
  const myPlayer = players.find(p => p.id === myId);
  const isAlive = myPlayer?.isAlive ?? true; // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï
  const canChat = isAlive && phase === 'night'; // ‚≠ê ‡πÅ‡∏ä‡∏ó‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

  useEffect(() => {
    socketService.on('werewolfChatMessage', (message) => {
      addWerewolfChatMessage(message);
      soundManager.playMessage();
    });

    return () => {
      socketService.off('werewolfChatMessage');
    };
  }, [addWerewolfChatMessage]);

  const handleSendMessage = (e) => {
    e.preventDefault();
    if (inputMessage.trim() && canChat) {
      socketService.emit('werewolfChat', inputMessage.trim());
      setInputMessage('');
    }
  };

  return (
    <div className="card h-[600px] flex flex-col bg-red-900/20 border-2 border-red-500">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-xl font-bold text-red-300">üê∫ ‡πÅ‡∏ä‡∏ó‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤ {phase === 'night' ? '(‡πÄ‡∏õ‡∏¥‡∏î)' : '(‡∏õ‡∏¥‡∏î)'}</h3>
        <span className="text-xs text-red-400 bg-red-900/50 px-2 py-1 rounded">
          ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤
        </span>
      </div>
      
      {/* Teammates Info */}
      {teammates && teammates.length > 0 && (
        <div className="mb-3 p-2 bg-red-900/30 rounded border border-red-700">
          <div className="text-xs text-red-300 font-semibold mb-1">‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏µ‡∏°:</div>
          <div className="flex flex-wrap gap-1">
            {teammates.map((member, idx) => (
              <span key={idx} className="text-xs bg-red-800/50 px-2 py-0.5 rounded">
                {member.name}
              </span>
            ))}
          </div>
        </div>
      )}
      
      {/* Messages */}
      <div className="flex-1 overflow-y-auto space-y-2 mb-4">
        {werewolfChatMessages.length === 0 ? (
          <div className="text-center text-red-400 mt-8">
            <div className="text-4xl mb-2">üê∫</div>
            <div>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</div>
            <div className="text-sm text-red-500 mt-1">
              ‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤!
            </div>
          </div>
        ) : (
          werewolfChatMessages.map((msg, index) => {
            const myId = socketService.socket?.id;
            const isMyMessage = msg.playerId === myId;

            return (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                className={`flex ${isMyMessage ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-[70%] rounded-lg p-3 ${
                    isMyMessage
                      ? 'bg-red-700 text-white'
                      : 'bg-red-900/50 text-red-100 border border-red-700'
                  }`}
                >
                  <div className="text-xs opacity-75 mb-1 flex items-center gap-1">
                    <span className="font-semibold">{msg.playerName}</span>
                    <span>‚Ä¢</span>
                    <span>
                      {new Date(msg.timestamp).toLocaleTimeString('th-TH', {
                        hour: '2-digit',
                        minute: '2-digit',
                      })}
                    </span>
                  </div>
                  <div className="break-words">{msg.message}</div>
                </div>
              </motion.div>
            );
          })
        )}
      </div>

      {/* Input */}
      <form onSubmit={handleSendMessage} className="flex gap-2">
        <input
          type="text"
          value={inputMessage}
          onChange={(e) => setInputMessage(e.target.value)}
          placeholder={
            !isAlive 
              ? "üíÄ ‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ä‡∏ó‡πÑ‡∏î‡πâ" 
              : phase !== 'night' 
                ? "‚òÄÔ∏è ‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ä‡∏ó‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤‡πÑ‡∏î‡πâ" 
                : "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤... üê∫"
          }
          className="flex-1 bg-red-900/30 border border-red-700 rounded-lg px-4 py-2 text-white placeholder-red-400 focus:outline-none focus:ring-2 focus:ring-red-500 disabled:opacity-50 disabled:cursor-not-allowed"
          maxLength={200}
          disabled={!canChat}
        />
        <button
          type="submit"
          disabled={!inputMessage.trim() || !canChat}
          className={`px-6 py-2 rounded-lg font-semibold transition-all ${
            inputMessage.trim() && canChat
              ? 'bg-red-600 hover:bg-red-700 text-white shadow-lg shadow-red-500/50'
              : 'bg-red-900/50 text-red-600 cursor-not-allowed'
          }`}
        >
          ‡∏™‡πà‡∏á
        </button>
      </form>

      <div className="mt-2 text-xs text-red-400 text-center">
        {!isAlive ? (
          <span>üíÄ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ</span>
        ) : phase !== 'night' ? (
          <span>‚òÄÔ∏è ‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ä‡∏ó‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤‡πÑ‡∏î‡πâ</span>
        ) : (
          <span>‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</span>
        )}
      </div>
    </div>
  );
}

export default WerewolfChat;

