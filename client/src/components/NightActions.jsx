import { useState, useEffect } from 'react';
import { useGameStore } from '../store/gameStore';
import { socketService } from '../services/socket';
import { soundManager } from '../utils/sounds';
import { motion, AnimatePresence } from 'framer-motion';

function NightActions() {
  const { playerRole, players, phase, day, showRoleModal } = useGameStore();
  
  // ‚≠ê Hooks ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏´‡πâ‡∏≤‡∏° conditional hooks)
  const [selectedTarget, setSelectedTarget] = useState(null);
  const [selectedTarget2, setSelectedTarget2] = useState(null);
  const [actionType, setActionType] = useState(null);
  const [actionSubmitted, setActionSubmitted] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [witchPotions, setWitchPotions] = useState({ heal: true, poison: true }); // ‚≠ê ‡∏¢‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏°‡πà‡∏°‡∏î

  useEffect(() => {
    setSelectedTarget(null);
    setSelectedTarget2(null);
    setActionType(null);
    setActionSubmitted(false);
    
    // ‚≠ê ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏°‡πà‡∏°‡∏î
    const handleWitchPotionsUpdate = (data) => {
      console.log('üßô‚Äç‚ôÄÔ∏è Received witch potions:', data);
      setWitchPotions(data.potions || { heal: true, poison: true });
    };
    
    socketService.on('witchPotionsUpdate', handleWitchPotionsUpdate);
    
    // ‚≠ê ‡∏£‡∏≠‡πÉ‡∏´‡πâ Role Card ‡∏õ‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡∏∂‡∏á‡πÅ‡∏™‡∏î‡∏á Night Action Modal
    if (phase === 'night' && !showRoleModal && (playerRole === '‡∏Ñ‡∏¥‡∏ß‡∏õ‡∏¥‡∏î' || playerRole === '‡πÅ‡∏°‡πà‡∏°‡∏î' || playerRole === '‡∏≠‡∏±‡∏•‡∏ü‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤')) {
      // ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏°‡πà‡∏°‡∏î
      if (playerRole === '‡πÅ‡∏°‡πà‡∏°‡∏î') {
        socketService.emit('requestWitchPotions');
      }
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ Role Modal ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
      const timer = setTimeout(() => {
        setShowModal(true);
      }, 500);
      return () => {
        clearTimeout(timer);
        socketService.off('witchPotionsUpdate', handleWitchPotionsUpdate);
      };
    }
    
    return () => {
      socketService.off('witchPotionsUpdate', handleWitchPotionsUpdate);
    };
  }, [phase, day, playerRole, showRoleModal]);

  // ‚≠ê ‡∏´‡∏•‡∏±‡∏á hooks ‡πÅ‡∏•‡πâ‡∏ß ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞ return null ‡πÑ‡∏î‡πâ
  const myId = socketService.socket?.id;
  const myPlayer = players.find(p => p.id === myId);

  const simpleRoles = ['‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤', '‡∏•‡∏π‡∏Å‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤', '‡∏´‡∏°‡∏≠‡∏î‡∏π', '‡∏ö‡∏≠‡∏î‡∏µ‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î'];
  
  if (simpleRoles.includes(playerRole)) {
    return null;
  }

  if (!['‡∏Ñ‡∏¥‡∏ß‡∏õ‡∏¥‡∏î', '‡πÅ‡∏°‡πà‡∏°‡∏î', '‡∏≠‡∏±‡∏•‡∏ü‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤'].includes(playerRole)) {
    return null;
  }

  if (!myPlayer?.isAlive) {
    return null;
  }

  // ‚≠ê ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ role
  let availableTargets = [];
  
  if (playerRole === '‡πÅ‡∏°‡πà‡∏°‡∏î') {
    // ‡πÅ‡∏°‡πà‡∏°‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    availableTargets = players.filter(p => p.isAlive);
  } else if (playerRole === '‡∏≠‡∏±‡∏•‡∏ü‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤') {
    // ‚≠ê Alpha Wolf ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô (‡πÅ‡∏ï‡πà‡∏à‡∏∞ disable ‡∏û‡∏ß‡∏Å‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÉ‡∏ô UI)
    availableTargets = players.filter(p => p.isAlive);
  } else if (playerRole === '‡∏Ñ‡∏¥‡∏ß‡∏õ‡∏¥‡∏î') {
    // ‡∏Ñ‡∏¥‡∏ß‡∏õ‡∏¥‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    availableTargets = players.filter(p => p.isAlive && p.id !== myId);
  } else {
    // Default: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    availableTargets = players.filter(p => p.isAlive && p.id !== myId);
  }

  const handleSubmitAction = () => {
    let action = {};

    if (playerRole === '‡∏Ñ‡∏¥‡∏ß‡∏õ‡∏¥‡∏î') {
      if (selectedTarget && selectedTarget2 && selectedTarget !== selectedTarget2) {
        action = { 
          type: 'cupid', 
          lover1: selectedTarget, 
          lover2: selectedTarget2 
        };
      } else {
        return;
      }
    } else if (playerRole === '‡πÅ‡∏°‡πà‡∏°‡∏î') {
      if (actionType && selectedTarget) {
        action = { 
          type: actionType,
          targetId: selectedTarget 
        };
      } else {
        return;
      }
    } else if (playerRole === '‡∏≠‡∏±‡∏•‡∏ü‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤') {
      if (actionType && selectedTarget) {
        action = { 
          type: actionType, // 'kill' ‡∏´‡∏£‡∏∑‡∏≠ 'convert'
          targetId: selectedTarget 
        };
      } else {
        return;
      }
    }

    socketService.emit('nightAction', action);
    setActionSubmitted(true);
    
    if (playerRole === '‡∏Ñ‡∏¥‡∏ß‡∏õ‡∏¥‡∏î') {
      soundManager.playLover();
    } else {
      soundManager.playAction();
    }
  };

  const handleCloseModal = () => {
    if (actionSubmitted) {
      setShowModal(false);
    }
  };

  // Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏•‡∏ü‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤
  if (playerRole === '‡∏≠‡∏±‡∏•‡∏ü‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤' && showModal) {
    return (
      <AnimatePresence>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/90 flex items-center justify-center z-[60] p-4"
          onClick={handleCloseModal}
        >
          <motion.div
            initial={{ scale: 0.8, opacity: 0, y: 50 }}
            animate={{ scale: 1, opacity: 1, y: 0 }}
            exit={{ scale: 0.8, opacity: 0, y: 50 }}
            className="bg-gradient-to-br from-red-900 to-slate-900 p-8 rounded-2xl max-w-3xl w-full shadow-2xl border-2 border-red-600"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="flex items-center justify-between mb-6">
              <div>
                <h3 className="text-3xl font-bold text-red-300">üëëüê∫ ‡∏≠‡∏±‡∏•‡∏ü‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤</h3>
                <p className="text-slate-400 mt-2">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ü‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤ (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏ô‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á)</p>
              </div>
              {actionSubmitted && (
                <button onClick={handleCloseModal} className="text-slate-400 hover:text-white text-2xl">
                  ‚úï
                </button>
              )}
            </div>

            {actionSubmitted ? (
              <motion.div
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                className="text-center py-12 bg-green-900/30 rounded-xl border-2 border-green-500"
              >
                <div className="text-6xl mb-4">‚úì</div>
                <div className="text-green-400 font-bold text-2xl mb-2">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß</div>
                <div className="text-slate-300 text-lg">‡∏£‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô...</div>
                <button onClick={handleCloseModal} className="mt-6 btn bg-slate-700 hover:bg-slate-600 px-8 py-3">
                  ‡∏õ‡∏¥‡∏î
                </button>
              </motion.div>
            ) : (
              <>
                {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó */}
                <div className="grid grid-cols-2 gap-4 mb-6">
                  <button
                    onClick={() => setActionType('kill')}
                    className={`p-6 rounded-xl transition-all ${
                      actionType === 'kill'
                        ? 'bg-red-600 border-2 border-red-400 shadow-lg shadow-red-500/50'
                        : 'bg-slate-700 hover:bg-slate-600 border-2 border-slate-600'
                    }`}
                  >
                    <div className="text-5xl mb-2">‚öîÔ∏è</div>
                    <div className="font-bold text-lg">‡∏Ü‡πà‡∏≤</div>
                    <div className="text-sm text-slate-400">‡∏Ü‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 1 ‡∏Ñ‡∏ô</div>
                  </button>
                  <button
                    onClick={() => setActionType('convert')}
                    className={`p-6 rounded-xl transition-all ${
                      actionType === 'convert'
                        ? 'bg-orange-600 border-2 border-orange-400 shadow-lg shadow-orange-500/50'
                        : 'bg-slate-700 hover:bg-slate-600 border-2 border-slate-600'
                    }`}
                  >
                    <div className="text-5xl mb-2">üê∫</div>
                    <div className="font-bold text-lg">‡∏Å‡∏±‡∏î</div>
                    <div className="text-sm text-slate-400">‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤</div>
                  </button>
                </div>

                {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ */}
                {actionType && (
                  <>
                    <p className="text-lg text-slate-300 mb-4 font-semibold">
                      ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö{actionType === 'kill' ? '‡∏Ü‡πà‡∏≤ ‚öîÔ∏è' : '‡∏Å‡∏±‡∏î üê∫'}:
                    </p>
                    <div className="grid grid-cols-3 md:grid-cols-4 gap-3 mb-6 max-h-[300px] overflow-y-auto">
                      {availableTargets.map((player) => {
                        // ‚≠ê ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏ß‡∏Å‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÑ‡∏´‡∏° (‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ Alpha Wolf ‡∏£‡∏π‡πâ)
                        const werewolfTeamRoles = ['‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤', '‡∏≠‡∏±‡∏•‡∏ü‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤', '‡∏•‡∏π‡∏Å‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤', '‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏¢‡∏®'];
                        const isTeammate = player.role && werewolfTeamRoles.includes(player.role);
                        const isMe = player.id === socketService.socket?.id;
                        
                        return (
                          <motion.button
                            key={player.id}
                            whileHover={{ scale: isTeammate ? 1 : 1.05 }}
                            whileTap={{ scale: isTeammate ? 1 : 0.95 }}
                            onClick={() => {
                              if (isTeammate) {
                                soundManager.playError();
                                // ‡πÅ‡∏™‡∏î‡∏á notification ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
                                alert('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ß‡∏Å‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ!');
                                return;
                              }
                              setSelectedTarget(player.id);
                            }}
                            disabled={isTeammate}
                            className={`p-4 rounded-xl transition-all relative ${
                              isTeammate
                                ? 'bg-slate-800/50 border-2 border-red-500/50 opacity-60 cursor-not-allowed'
                                : selectedTarget === player.id
                                ? actionType === 'kill'
                                  ? 'bg-red-600 border-2 border-red-400 shadow-lg'
                                  : 'bg-orange-600 border-2 border-orange-400 shadow-lg'
                                : 'bg-slate-700 hover:bg-slate-600 border-2 border-slate-600'
                            }`}
                          >
                            {/* ‚≠ê Badge ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏ß‡∏Å‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô */}
                            {isTeammate && (
                              <div className="absolute -top-2 -right-2 bg-red-600 text-white text-xs px-2 py-1 rounded-full font-bold border-2 border-red-400 shadow-lg">
                                üê∫
                              </div>
                            )}
                            <div className="text-3xl mb-2">üë§</div>
                            {/* ‚≠ê ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß, ‡∏ó‡∏µ‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á */}
                            <div className={`font-semibold text-sm break-words ${
                              isMe ? 'text-green-400' : isTeammate ? 'text-red-400' : ''
                            }`}>
                              {player.name}
                              {isTeammate && player.role && (
                                <span className="text-red-300 text-xs block mt-1">({player.role})</span>
                              )}
                            </div>
                          </motion.button>
                        );
                      })}
                    </div>
                  </>
                )}

                <button
                  onClick={handleSubmitAction}
                  disabled={!actionType || !selectedTarget}
                  className={`btn w-full text-lg py-4 ${
                    actionType && selectedTarget 
                      ? actionType === 'kill'
                        ? 'bg-red-600 hover:bg-red-700 text-white shadow-lg'
                        : 'bg-orange-600 hover:bg-orange-700 text-white shadow-lg'
                      : 'bg-slate-600 text-slate-400 cursor-not-allowed'
                  }`}
                >
                  {actionType && selectedTarget ? (actionType === 'kill' ? '‚úì ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ü‡πà‡∏≤' : '‚úì ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏î') : '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢'}
                </button>
              </>
            )}
          </motion.div>
        </motion.div>
      </AnimatePresence>
    );
  }

  // Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏°‡πà‡∏°‡∏î
  if (playerRole === '‡πÅ‡∏°‡πà‡∏°‡∏î' && showModal) {
    return (
      <AnimatePresence>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/90 flex items-center justify-center z-[60] p-4"
          onClick={handleCloseModal}
        >
          <motion.div
            initial={{ scale: 0.8, opacity: 0, y: 50 }}
            animate={{ scale: 1, opacity: 1, y: 0 }}
            exit={{ scale: 0.8, opacity: 0, y: 50 }}
            className="bg-gradient-to-br from-purple-900 to-slate-900 p-8 rounded-2xl max-w-3xl w-full shadow-2xl border-2 border-purple-600"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="flex items-center justify-between mb-6">
              <div>
                <h3 className="text-3xl font-bold text-purple-300">üßô‚Äç‚ôÄÔ∏è ‡πÅ‡∏°‡πà‡∏°‡∏î</h3>
                <p className="text-slate-400 mt-2">‡∏£‡∏±‡∏Å‡∏©‡∏≤ ‡πÅ‡∏•‡∏∞‡∏¢‡∏≤‡∏û‡∏¥‡∏© ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏ô‡∏•‡∏∞ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡∏•‡∏≠‡∏î‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏Å‡∏°</p>
                {/* ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ */}
                <div className="flex gap-4 mt-3">
                  <div className={`px-3 py-1 rounded-lg text-sm font-semibold ${
                    witchPotions.heal ? 'bg-green-900/50 text-green-300 border border-green-600' : 'bg-gray-900/50 text-gray-500 border border-gray-700'
                  }`}>
                    üíö ‡∏£‡∏±‡∏Å‡∏©‡∏≤: {witchPotions.heal ? '1' : '0'}
                  </div>
                  <div className={`px-3 py-1 rounded-lg text-sm font-semibold ${
                    witchPotions.poison ? 'bg-purple-900/50 text-purple-300 border border-purple-600' : 'bg-gray-900/50 text-gray-500 border border-gray-700'
                  }`}>
                    ‚ò†Ô∏è ‡∏¢‡∏≤‡∏û‡∏¥‡∏©: {witchPotions.poison ? '1' : '0'}
                  </div>
                </div>
              </div>
              {actionSubmitted && (
                <button onClick={handleCloseModal} className="text-slate-400 hover:text-white text-2xl">
                  ‚úï
                </button>
              )}
            </div>

            {actionSubmitted ? (
              <motion.div
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                className="text-center py-12 bg-green-900/30 rounded-xl border-2 border-green-500"
              >
                <div className="text-6xl mb-4">‚úì</div>
                <div className="text-green-400 font-bold text-2xl mb-2">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß</div>
                <div className="text-slate-300 text-lg">‡∏£‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô...</div>
                <button onClick={handleCloseModal} className="mt-6 btn bg-slate-700 hover:bg-slate-600 px-8 py-3">
                  ‡∏õ‡∏¥‡∏î
                </button>
              </motion.div>
            ) : (
              <>
                {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó */}
                <div className="grid grid-cols-2 gap-4 mb-6">
                  <button
                    onClick={() => witchPotions.heal && setActionType('heal')}
                    disabled={!witchPotions.heal}
                    className={`p-6 rounded-xl transition-all relative ${
                      actionType === 'heal'
                        ? 'bg-green-600 border-2 border-green-400 shadow-lg shadow-green-500/50'
                        : !witchPotions.heal
                        ? 'bg-gray-900/50 border-2 border-gray-700 opacity-50 cursor-not-allowed'
                        : 'bg-slate-700 hover:bg-slate-600 border-2 border-slate-600'
                    }`}
                  >
                    <div className="text-5xl mb-2">üíö</div>
                    <div className="font-bold text-lg">‡∏£‡∏±‡∏Å‡∏©‡∏≤</div>
                    <div className="text-sm text-slate-400">
                      {witchPotions.heal ? '‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ü‡πà‡∏≤ 1 ‡∏Ñ‡∏ô' : '‚ùå ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß'}
                    </div>
                    {!witchPotions.heal && (
                      <div className="absolute top-2 right-2 bg-red-600 text-white text-xs px-2 py-1 rounded-full font-bold">
                        0
                      </div>
                    )}
                  </button>
                  <button
                    onClick={() => witchPotions.poison && setActionType('poison')}
                    disabled={!witchPotions.poison}
                    className={`p-6 rounded-xl transition-all relative ${
                      actionType === 'poison'
                        ? 'bg-purple-600 border-2 border-purple-400 shadow-lg shadow-purple-500/50'
                        : !witchPotions.poison
                        ? 'bg-gray-900/50 border-2 border-gray-700 opacity-50 cursor-not-allowed'
                        : 'bg-slate-700 hover:bg-slate-600 border-2 border-slate-600'
                    }`}
                  >
                    <div className="text-5xl mb-2">‚ò†Ô∏è</div>
                    <div className="font-bold text-lg">‡∏¢‡∏≤‡∏û‡∏¥‡∏©</div>
                    <div className="text-sm text-slate-400">
                      {witchPotions.poison ? '‡∏Ü‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 1 ‡∏Ñ‡∏ô' : '‚ùå ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß'}
                    </div>
                    {!witchPotions.poison && (
                      <div className="absolute top-2 right-2 bg-red-600 text-white text-xs px-2 py-1 rounded-full font-bold">
                        0
                      </div>
                    )}
                  </button>
                </div>

                {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ */}
                {actionType && (
                  <>
                    <p className="text-lg text-slate-300 mb-4 font-semibold">
                      ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö{actionType === 'heal' ? '‡∏£‡∏±‡∏Å‡∏©‡∏≤ üíö' : '‡∏¢‡∏≤‡∏û‡∏¥‡∏© ‚ò†Ô∏è'}:
                    </p>
                    <div className="grid grid-cols-3 md:grid-cols-4 gap-3 mb-6 max-h-[300px] overflow-y-auto">
                      {availableTargets.map((player) => {
                        const isMe = player.id === socketService.socket?.id;
                        return (
                          <motion.button
                            key={player.id}
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                            onClick={() => setSelectedTarget(player.id)}
                            className={`p-4 rounded-xl transition-all ${
                              selectedTarget === player.id
                                ? actionType === 'heal'
                                  ? 'bg-green-600 border-2 border-green-400 shadow-lg'
                                  : 'bg-purple-600 border-2 border-purple-400 shadow-lg'
                                : 'bg-slate-700 hover:bg-slate-600 border-2 border-slate-600'
                            }`}
                          >
                            <div className="text-3xl mb-2">üë§</div>
                            <div className={`font-semibold text-sm break-words ${isMe ? 'text-green-400' : ''}`}>{player.name}</div>
                          </motion.button>
                        );
                      })}
                    </div>
                  </>
                )}

                <div className="flex gap-3">
                  <button
                    onClick={() => {
                      setActionSubmitted(true);
                      handleCloseModal();
                      soundManager.playSuccess();
                    }}
                    className="btn flex-1 text-lg py-4 bg-slate-700 hover:bg-slate-600 text-white"
                  >
                    ‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏¢‡∏≤)
                  </button>
                  <button
                    onClick={handleSubmitAction}
                    disabled={!actionType || !selectedTarget}
                    className={`btn flex-1 text-lg py-4 ${
                      actionType && selectedTarget 
                        ? actionType === 'heal'
                          ? 'bg-green-600 hover:bg-green-700 text-white shadow-lg'
                          : 'bg-purple-600 hover:bg-purple-700 text-white shadow-lg'
                        : 'bg-slate-600 text-slate-400 cursor-not-allowed'
                    }`}
                  >
                    {actionType && selectedTarget ? (actionType === 'heal' ? '‚úì ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤' : '‚úì ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏¢‡∏≤‡∏û‡∏¥‡∏©') : '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢'}
                  </button>
                </div>
              </>
            )}
          </motion.div>
        </motion.div>
      </AnimatePresence>
    );
  }

  // Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏¥‡∏ß‡∏õ‡∏¥‡∏î
  if (playerRole === '‡∏Ñ‡∏¥‡∏ß‡∏õ‡∏¥‡∏î' && showModal) {
    return (
      <AnimatePresence>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/90 flex items-center justify-center z-[60] p-4"
          onClick={handleCloseModal}
        >
          <motion.div
            initial={{ scale: 0.8, opacity: 0, y: 50 }}
            animate={{ scale: 1, opacity: 1, y: 0 }}
            exit={{ scale: 0.8, opacity: 0, y: 50 }}
            className="bg-gradient-to-br from-pink-900 to-slate-900 p-8 rounded-2xl max-w-3xl w-full shadow-2xl border-2 border-pink-600"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="flex items-center justify-between mb-6">
              <div>
                <h3 className="text-3xl font-bold text-pink-300">üíò ‡∏Ñ‡∏¥‡∏ß‡∏õ‡∏¥‡∏î</h3>
                <p className="text-slate-400 mt-2">‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å 2 ‡∏Ñ‡∏ô (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÉ‡∏ô‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏£‡∏Å)</p>
                <p className="text-pink-300 text-sm mt-1">‚ö†Ô∏è ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡πÉ‡∏î‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡∏≤‡∏¢ ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏ô‡∏à‡∏∞‡∏ï‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢</p>
              </div>
              {actionSubmitted && (
                <button onClick={handleCloseModal} className="text-slate-400 hover:text-white text-2xl">
                  ‚úï
                </button>
              )}
            </div>

            {actionSubmitted ? (
              <motion.div
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                className="text-center py-12 bg-green-900/30 rounded-xl border-2 border-green-500"
              >
                <div className="text-6xl mb-4">üíò</div>
                <div className="text-green-400 font-bold text-2xl mb-2">‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß</div>
                <div className="text-slate-300 text-lg">‡∏£‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô...</div>
                <button onClick={handleCloseModal} className="mt-6 btn bg-slate-700 hover:bg-slate-600 px-8 py-3">
                  ‡∏õ‡∏¥‡∏î
                </button>
              </motion.div>
            ) : (
              <>
                <div className="mb-6 p-4 bg-pink-900/30 border-2 border-pink-600 rounded-xl text-pink-200">
                  ‚ö†Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 2 ‡∏Ñ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å - ‡∏û‡∏ß‡∏Å‡πÄ‡∏Ç‡∏≤‡∏à‡∏∞‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡∏ï‡∏≤‡∏¢‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô!
                </div>

                <p className="text-lg font-bold mb-3 text-pink-300">üë§ ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 1:</p>
                <div className="grid grid-cols-3 md:grid-cols-4 gap-3 mb-6 max-h-[200px] overflow-y-auto">
                  {availableTargets.map((player) => {
                    const isMe = player.id === socketService.socket?.id;
                    return (
                      <motion.button
                        key={player.id}
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        onClick={() => setSelectedTarget(player.id)}
                        disabled={selectedTarget2 === player.id}
                        className={`p-4 rounded-xl transition-all ${
                          selectedTarget === player.id
                            ? 'bg-pink-600 border-2 border-pink-400 shadow-lg'
                            : selectedTarget2 === player.id
                            ? 'bg-slate-800 opacity-50 cursor-not-allowed'
                            : 'bg-slate-700 hover:bg-slate-600 border-2 border-slate-600'
                        }`}
                      >
                        <div className="text-3xl mb-1">{selectedTarget === player.id ? 'üíó' : 'üë§'}</div>
                        <div className={`font-semibold text-sm break-words ${isMe ? 'text-green-400' : ''}`}>{player.name}</div>
                      </motion.button>
                    );
                  })}
                </div>

                <p className="text-lg font-bold mb-3 text-pink-300">üë§ ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 2:</p>
                <div className="grid grid-cols-3 md:grid-cols-4 gap-3 mb-6 max-h-[200px] overflow-y-auto">
                  {availableTargets.map((player) => {
                    const isMe = player.id === socketService.socket?.id;
                    return (
                      <motion.button
                        key={player.id}
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        onClick={() => setSelectedTarget2(player.id)}
                        disabled={selectedTarget === player.id}
                        className={`p-4 rounded-xl transition-all ${
                          selectedTarget2 === player.id
                            ? 'bg-pink-600 border-2 border-pink-400 shadow-lg'
                            : selectedTarget === player.id
                            ? 'bg-slate-800 opacity-50 cursor-not-allowed'
                            : 'bg-slate-700 hover:bg-slate-600 border-2 border-slate-600'
                        }`}
                      >
                        <div className="text-3xl mb-1">{selectedTarget2 === player.id ? 'üíó' : 'üë§'}</div>
                        <div className={`font-semibold text-sm break-words ${isMe ? 'text-green-400' : ''}`}>{player.name}</div>
                      </motion.button>
                    );
                  })}
                </div>

                <button
                  onClick={handleSubmitAction}
                  disabled={!selectedTarget || !selectedTarget2 || selectedTarget === selectedTarget2}
                  className={`btn w-full text-lg py-4 ${
                    selectedTarget && selectedTarget2 && selectedTarget !== selectedTarget2
                      ? 'bg-pink-600 hover:bg-pink-700 text-white shadow-lg shadow-pink-500/50'
                      : 'bg-slate-600 text-slate-400 cursor-not-allowed'
                  }`}
                >
                  {selectedTarget && selectedTarget2 ? 'üíò ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å' : '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 2 ‡∏Ñ‡∏ô'}
                </button>
              </>
            )}
          </motion.div>
        </motion.div>
      </AnimatePresence>
    );
  }

  return null;
}

export default NightActions;
