import { ROLES } from './constants.js';

export class AIPlayer {
  constructor(game, playerId, playerName, role) {
    this.game = game;
    this.playerId = playerId;
    this.playerName = playerName;
    this.role = role;
    this.suspicionLevels = new Map(); // Track suspicion of other players
    this.observations = [];
    this.personality = this.generatePersonality();
  }

  generatePersonality() {
    // Different AI personalities for varied gameplay
    const personalities = ['aggressive', 'defensive', 'analytical', 'random', 'strategic'];
    return personalities[Math.floor(Math.random() * personalities.length)];
  }

  // AI makes night action decision
  async makeNightAction() {
    await this.delay(Math.random() * 20000 + 5000); // Random delay 5-25 seconds

    const alivePlayers = this.game.players.filter(
      p => p.isAlive && p.id !== this.playerId
    );

    if (alivePlayers.length === 0) return;

    let target;
    let target2; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Alpha Werewolf

    switch (this.role) {
      case ROLES.WEREWOLF:
      case ROLES.WOLF_CUB:
        target = this.chooseWerewolfTarget(alivePlayers);
        break;
      case ROLES.ALPHA_WEREWOLF:
        // ‚≠ê Alpha Werewolf ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ü‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏±‡∏î
        const alphaAction = this.chooseAlphaWerewolfAction(alivePlayers);
        if (alphaAction) {
          this.game.handleNightAction(this.playerId, alphaAction);
          return; // Return early ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏™‡πà‡∏á action ‡πÅ‡∏•‡πâ‡∏ß
        }
        return;
      case ROLES.SEER:
        target = this.chooseSeerTarget(alivePlayers);
        break;
      case ROLES.BODYGUARD:
        target = this.chooseDoctorTarget(alivePlayers);
        break;
      case ROLES.CUPID:
        // ‚≠ê Cupid ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å 2 ‡∏Ñ‡∏ô
        const cupidAction = this.chooseCupidPair(alivePlayers);
        if (cupidAction) {
          this.game.handleNightAction(this.playerId, cupidAction);
        }
        return; // Return early ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏™‡πà‡∏á action ‡πÅ‡∏•‡πâ‡∏ß
      case ROLES.WITCH:
        // ‚≠ê Witch ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡∏¢‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏≤‡∏û‡∏¥‡∏©
        const witchAction = this.chooseWitchAction(alivePlayers);
        if (witchAction) {
          this.game.handleNightAction(this.playerId, witchAction);
        }
        return; // Return early ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏™‡πà‡∏á action ‡πÅ‡∏•‡πâ‡∏ß
      default:
        return;
    }

    if (target) {
      this.game.handleNightAction(this.playerId, { targetId: target.id });
    }
  }

  // Werewolf AI: Target strategic players or random
  chooseWerewolfTarget(alivePlayers) {
    // ‚≠ê ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏¢‡∏® (‡∏û‡∏ß‡∏Å‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
    const werewolfTeamRoles = ['‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤', '‡∏≠‡∏±‡∏•‡∏ü‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤', '‡∏•‡∏π‡∏Å‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤', '‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏¢‡∏®'];
    const nonWerewolfPlayers = alivePlayers.filter(p => !werewolfTeamRoles.includes(p.role));
    
    if (nonWerewolfPlayers.length === 0) return null;
    
    switch (this.personality) {
      case 'aggressive':
        // Target the most vocal/active players first
        return nonWerewolfPlayers[Math.floor(Math.random() * Math.min(3, nonWerewolfPlayers.length))];
      
      case 'strategic':
        // Avoid targeting players who might be protected
        // Target middle-ground players to avoid suspicion
        const midIndex = Math.floor(nonWerewolfPlayers.length / 2);
        return nonWerewolfPlayers[midIndex];
      
      default:
        // Random target
        return nonWerewolfPlayers[Math.floor(Math.random() * nonWerewolfPlayers.length)];
    }
  }

  // ‚≠ê Alpha Werewolf AI: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ü‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏±‡∏î (‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤)
  chooseAlphaWerewolfAction(alivePlayers) {
    const werewolfTeamRoles = ['‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤', '‡∏≠‡∏±‡∏•‡∏ü‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤', '‡∏•‡∏π‡∏Å‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤', '‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏¢‡∏®'];
    const nonWerewolfPlayers = alivePlayers.filter(p => !werewolfTeamRoles.includes(p.role));
    
    if (nonWerewolfPlayers.length === 0) return null;
    
    // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    const target = nonWerewolfPlayers[Math.floor(Math.random() * nonWerewolfPlayers.length)];
    
    // ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Ü‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏±‡∏î
    // 70% ‡∏Ü‡πà‡∏≤, 30% ‡∏Å‡∏±‡∏î (‡πÅ‡∏õ‡∏•‡∏á)
    const shouldKill = Math.random() < 0.7;
    
    return {
      type: shouldKill ? 'kill' : 'convert',
      targetId: target.id
    };
  }

  // Seer AI: Investigate suspicious or unknown players
  chooseSeerTarget(alivePlayers) {
    // Prioritize players with high suspicion or unknowns
    const uninvestigated = alivePlayers.filter(p => !this.observations.includes(p.id));
    
    if (uninvestigated.length > 0) {
      if (this.personality === 'analytical') {
        // Check the most suspicious first
        return uninvestigated[0];
      }
      return uninvestigated[Math.floor(Math.random() * uninvestigated.length)];
    }
    
    return alivePlayers[Math.floor(Math.random() * alivePlayers.length)];
  }

  // Doctor AI: Protect likely targets or self-preservation
  chooseDoctorTarget(alivePlayers) {
    switch (this.personality) {
      case 'defensive':
        // Protect self sometimes
        if (Math.random() > 0.5) {
          const self = this.game.players.find(p => p.id === this.playerId);
          return self;
        }
        break;
      
      case 'strategic':
        // Protect confirmed villagers or important roles
        // In early game, random protection
        return alivePlayers[Math.floor(Math.random() * Math.min(3, alivePlayers.length))];
      
      default:
        break;
    }
    
    return alivePlayers[Math.floor(Math.random() * alivePlayers.length)];
  }

  // ‚≠ê Cupid AI: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å 2 ‡∏Ñ‡∏ô
  chooseCupidPair(alivePlayers) {
    // Check if Cupid has already used ability
    const cupidPlayer = this.game.players.find(p => p.id === this.playerId);
    if (cupidPlayer && cupidPlayer.hasUsedAbility) {
      return null; // Already used
    }

    if (alivePlayers.length < 2) return null;

    // Random selection of 2 different players
    const shuffled = [...alivePlayers].sort(() => Math.random() - 0.5);
    const lover1 = shuffled[0];
    const lover2 = shuffled[1];

    return {
      lover1: lover1.id,
      lover2: lover2.id
    };
  }

  // ‚≠ê Witch AI: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡∏¢‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏≤‡∏û‡∏¥‡∏©
  chooseWitchAction(alivePlayers) {
    const witchPlayer = this.game.players.find(p => p.id === this.playerId);
    if (!witchPlayer) return null;

    // ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏¢‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ö‡πâ‡∏≤‡∏á
    const witchPotions = this.game.witchPotions?.get(this.playerId) || { heal: 0, poison: 0 };
    const hasHeal = witchPotions.heal > 0;
    const hasPoison = witchPotions.poison > 0;

    if (!hasHeal && !hasPoison) return null; // No potions left

    // ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡πÇ‡∏î‡∏ô‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÑ‡∏´‡∏°
    const werewolfTarget = this.game.nightActions.get('werewolf');
    
    // üß™ Strategy: ‡πÉ‡∏ä‡πâ‡∏¢‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ô‡πÇ‡∏î‡∏ô‡πÇ‡∏à‡∏°‡∏ï‡∏µ
    if (werewolfTarget && hasHeal) {
      // 70% ‡πÉ‡∏ä‡πâ‡∏¢‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤
      if (Math.random() < 0.7) {
        return {
          type: 'heal',
          targetId: werewolfTarget
        };
      }
    }

    // üß™ Strategy: ‡πÉ‡∏ä‡πâ‡∏¢‡∏≤‡∏û‡∏¥‡∏©‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏™‡∏∏‡πà‡∏°
    if (hasPoison && Math.random() < 0.3) {
      const randomTarget = alivePlayers[Math.floor(Math.random() * alivePlayers.length)];
      return {
        type: 'poison',
        targetId: randomTarget.id
      };
    }

    return null; // Don't use any potion this night
  }

  // AI makes voting decision
  async makeVote() {
    await this.delay(Math.random() * 30000 + 10000); // Random delay 10-40 seconds

    const alivePlayers = this.game.players.filter(
      p => p.isAlive && p.id !== this.playerId
    );

    if (alivePlayers.length === 0) return;

    let shouldSkip = false;
    let target;

    // Decision making based on role and personality
    if (this.role === ROLES.WEREWOLF || this.role === ROLES.ALPHA_WEREWOLF || 
        this.role === ROLES.WOLF_CUB) {
      target = this.chooseWerewolfVote(alivePlayers);
      shouldSkip = Math.random() > 0.7; // Sometimes skip to avoid suspicion
    } else {
      target = this.chooseVillagerVote(alivePlayers);
      shouldSkip = Math.random() > 0.6; // Villagers more likely to vote
    }

    if (shouldSkip && Math.random() > 0.5) {
      this.game.handleSkipVote(this.playerId);
    } else if (target) {
      this.game.handleVote(this.playerId, target.id);
    } else {
      this.game.handleSkipVote(this.playerId);
    }
  }
  
  // üß† Helper: ‡∏î‡∏π‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  getCurrentVoteCounts(alivePlayers) {
    const voteCounts = new Map();
    
    // ‡∏ô‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å votes ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    this.game.votes.forEach((targetId, voterId) => {
      if (targetId !== 'skip') {
        voteCounts.set(targetId, (voteCounts.get(targetId) || 0) + 1);
      }
    });
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    const sortedVotes = Array.from(voteCounts.entries())
      .map(([playerId, count]) => ({
        player: alivePlayers.find(p => p.id === playerId),
        count
      }))
      .filter(v => v.player) // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï
      .sort((a, b) => b.count - a.count);
    
    return sortedVotes;
  }
  
  // üß† Helper: ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
  getTopVotedPlayer(alivePlayers) {
    const voteCounts = this.getCurrentVoteCounts(alivePlayers);
    return voteCounts.length > 0 ? voteCounts[0] : null;
  }

  // Werewolf voting strategy: Deflect suspicion, vote with majority
  chooseWerewolfVote(alivePlayers) {
    // ‚≠ê ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤ (‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏ß‡∏ï‡∏û‡∏ß‡∏Å‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
    const werewolfTeamRoles = ['‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤', '‡∏≠‡∏±‡∏•‡∏ü‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤', '‡∏•‡∏π‡∏Å‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤', '‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏¢‡∏®'];
    const nonWerewolfPlayers = alivePlayers.filter(p => !werewolfTeamRoles.includes(p.role));
    
    if (nonWerewolfPlayers.length === 0) return null;
    
    // ‡∏î‡∏π‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const topVoted = this.getTopVotedPlayer(nonWerewolfPlayers);
    
    // üß† Strategy: ‡πÇ‡∏´‡∏ß‡∏ï‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏á‡∏™‡∏±‡∏¢
    switch (this.personality) {
      case 'aggressive':
        // ‡πÇ‡∏´‡∏ß‡∏ï‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á 80% ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏∏‡πà‡∏° 20%
        if (topVoted && topVoted.count > 0 && Math.random() < 0.8) {
          return topVoted.player;
        }
        return nonWerewolfPlayers[Math.floor(Math.random() * Math.min(3, nonWerewolfPlayers.length))];
      
      case 'strategic':
        // ‡πÇ‡∏´‡∏ß‡∏ï‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á 90% (‡πÅ‡∏Å‡∏•‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô‡∏î‡∏µ)
        if (topVoted && topVoted.count > 0 && Math.random() < 0.9) {
          return topVoted.player;
        }
        return nonWerewolfPlayers[Math.floor(Math.random() * nonWerewolfPlayers.length)];
      
      case 'defensive':
        // ‡πÇ‡∏´‡∏ß‡∏ï‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á 70% ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏ß‡∏ï
        if (topVoted && topVoted.count > 0 && Math.random() < 0.7) {
          return topVoted.player;
        }
        if (Math.random() > 0.5) {
          return nonWerewolfPlayers[Math.floor(Math.random() * nonWerewolfPlayers.length)];
        }
        return null; // Sometimes skip
      
      default:
        // ‡πÇ‡∏´‡∏ß‡∏ï‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á 75%
        if (topVoted && topVoted.count > 0 && Math.random() < 0.75) {
          return topVoted.player;
        }
        return nonWerewolfPlayers[Math.floor(Math.random() * nonWerewolfPlayers.length)];
    }
  }

  // Villager voting strategy: Vote based on suspicion and follow majority
  chooseVillagerVote(alivePlayers) {
    // ‡∏î‡∏π‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const voteCounts = this.getCurrentVoteCounts(alivePlayers);
    const topVoted = voteCounts.length > 0 ? voteCounts[0] : null;
    
    // üîÆ Seer AI: ‡πÇ‡∏´‡∏ß‡∏ï‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤
    if (this.role === ROLES.SEER && this.suspicionLevels.size > 0) {
      // ‡∏´‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ suspicion ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
      let mostSuspicious = null;
      let maxSuspicion = 0;
      
      this.suspicionLevels.forEach((suspicion, playerId) => {
        if (suspicion > maxSuspicion) {
          const player = alivePlayers.find(p => p.id === playerId);
          if (player) {
            maxSuspicion = suspicion;
            mostSuspicious = player;
          }
        }
      });
      
      // ‡∏ñ‡πâ‡∏≤‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤ (suspicion = 100) ‡πÇ‡∏´‡∏ß‡∏ï‡πÄ‡∏•‡∏¢
      if (mostSuspicious && maxSuspicion === 100) {
        return mostSuspicious;
      }
    }
    
    // üß† ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏ß‡∏ï‡πÄ‡∏¢‡∏≠‡∏∞‡πÅ‡∏•‡πâ‡∏ß -> ‡πÇ‡∏´‡∏ß‡∏ï‡∏ï‡∏≤‡∏° (bandwagon effect)
    switch (this.personality) {
      case 'aggressive':
        // ‡πÇ‡∏´‡∏ß‡∏ï‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á 85% ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏∏‡πà‡∏°
        if (topVoted && topVoted.count >= 2 && Math.random() < 0.85) {
          return topVoted.player;
        }
        return alivePlayers[Math.floor(Math.random() * alivePlayers.length)];
      
      case 'strategic':
        // ‡∏£‡∏≠‡∏î‡∏π‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏ß‡∏ï 90%
        if (topVoted && topVoted.count >= 1 && Math.random() < 0.9) {
          return topVoted.player;
        }
        return alivePlayers[Math.floor(Math.random() * alivePlayers.length)];
      
      case 'analytical':
        // ‡πÇ‡∏´‡∏ß‡∏ï‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á 80% ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ô 2 ‡∏Ñ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÇ‡∏´‡∏ß‡∏ï
        if (topVoted && topVoted.count >= 2 && Math.random() < 0.8) {
          return topVoted.player;
        }
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÇ‡∏´‡∏ß‡∏ï‡∏ï‡∏≤‡∏° suspicion
        if (this.observations.length > 0) {
          const suspicious = alivePlayers[0];
          return suspicious;
        }
        return alivePlayers[Math.floor(Math.random() * alivePlayers.length)];
      
      case 'defensive':
        // ‡πÇ‡∏´‡∏ß‡∏ï‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á 75% ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏ß‡∏ï
        if (topVoted && topVoted.count >= 2 && Math.random() < 0.75) {
          return topVoted.player;
        }
        // More cautious, might skip
        if (Math.random() > 0.4) {
          return alivePlayers[Math.floor(Math.random() * alivePlayers.length)];
        }
        return null;
      
      default:
        // ‡πÇ‡∏´‡∏ß‡∏ï‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á 80%
        if (topVoted && topVoted.count >= 2 && Math.random() < 0.8) {
          return topVoted.player;
        }
        return alivePlayers[Math.floor(Math.random() * alivePlayers.length)];
    }
  }

  // AI chat messages (optional, adds realism)
  async sendChatMessage() {
    const messages = this.getChatMessages();
    if (messages.length > 0 && Math.random() > 0.5) {
      const message = messages[Math.floor(Math.random() * messages.length)];
      
      // Send message through game
      setTimeout(() => {
        if (this.game.io) {
          this.game.io.to(this.game.lobbyCode).emit('chatMessage', {
            playerName: this.playerName,
            playerId: this.playerId,
            message,
            timestamp: Date.now(),
            isBot: true
          });
        }
      }, Math.random() * 10000 + 2000);
    }
  }

  getChatMessages() {
    if (this.game.phase === 'day') {
      return [
        '‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏ô‡∏∞...',
        '‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡πÄ‡∏´‡πá‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÑ‡∏´‡∏°?',
        '‡πÄ‡∏£‡∏≤‡∏Ñ‡∏ß‡∏£‡πÇ‡∏´‡∏ß‡∏ï‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏ö',
        '‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÄ‡∏•‡∏¢...',
        '‡∏°‡∏≤‡∏Ñ‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡∏î‡∏µ‡πÜ ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Å‡∏≥‡∏à‡∏±‡∏î‡πÉ‡∏Ñ‡∏£',
        '‡∏°‡∏µ‡∏Ñ‡∏ô‡πÇ‡∏Å‡∏´‡∏Å‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô',
        '‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏à‡∏≠!',
        '‡∏â‡∏±‡∏ô‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏ö‡∏≤‡∏á‡∏Ñ‡∏ô...',
        '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏â‡∏±‡∏ô‡∏™‡∏¥',
        '‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏Å'
      ];
    }
    return [];
  }

  // Update AI knowledge when seer result received
  updateSeerKnowledge(playerId, isWerewolf) {
    this.observations.push(playerId);
    if (isWerewolf) {
      this.suspicionLevels.set(playerId, 100);
    } else {
      this.suspicionLevels.set(playerId, 0);
    }
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

