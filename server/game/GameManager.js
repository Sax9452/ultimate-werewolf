import { nanoid } from 'nanoid';
import { Game } from './Game.js';

export class GameManager {
  constructor(io) {
    this.io = io;
    this.lobbies = new Map();
    this.games = new Map();
    this.playerToLobby = new Map();
    this.botCounter = 0;
  }

  createLobby(socket, playerName) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 5 ‡∏´‡∏•‡∏±‡∏Å (10000-99999) ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
    let lobbyCode;
    do {
      lobbyCode = String(Math.floor(10000 + Math.random() * 90000));
    } while (this.lobbies.has(lobbyCode)); // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î‡∏ã‡πâ‡∏≥
    
    const lobby = {
      code: lobbyCode,
      host: socket.id,
      players: [{
        id: socket.id,
        name: playerName,
        ready: true,
        isBot: false
      }],
      maxPlayers: 30, // ‚≠ê ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà 30 ‡∏Ñ‡∏ô (‡∏™‡∏°‡∏î‡∏∏‡∏•)
      minPlayers: 3,
      settings: {
        nightDuration: 60,  // ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        dayDuration: 180,   // ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        roleDistribution: {
          '‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô': 0,
          '‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤': 0,
          '‡∏´‡∏°‡∏≠‡∏î‡∏π': 0,
          '‡∏ö‡∏≠‡∏î‡∏µ‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î': 0,
          '‡∏ô‡∏±‡∏Å‡∏•‡πà‡∏≤': 0,
          '‡∏Ñ‡∏¥‡∏ß‡∏õ‡∏¥‡∏î': 0,
          '‡∏•‡∏π‡∏Å‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤': 0,
          '‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏¢‡∏®': 0,
          '‡πÅ‡∏°‡πà‡∏°‡∏î': 0,
          '‡∏ï‡∏±‡∏ß‡∏ï‡∏•‡∏Å': 0,
          '‡∏≠‡∏±‡∏•‡∏ü‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤': 0
        }
      }
    };

    this.lobbies.set(lobbyCode, lobby);
    this.playerToLobby.set(socket.id, lobbyCode);
    socket.join(lobbyCode);

    socket.emit('lobbyCreated', { lobbyCode, lobby });
    console.log(`Lobby created: ${lobbyCode} by ${playerName}`);
  }

  updateLobbySettings(socket, settings) {
    const lobbyCode = this.playerToLobby.get(socket.id);
    const lobby = this.lobbies.get(lobbyCode);

    if (!lobby) {
      socket.emit('error', { message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á' });
      return;
    }

    if (lobby.host !== socket.id) {
      socket.emit('error', { message: '‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ' });
      return;
    }

    if (this.games.has(lobbyCode)) {
      socket.emit('error', { message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ' });
      return;
    }

    lobby.settings = { ...lobby.settings, ...settings };
    this.io.to(lobbyCode).emit('lobbyUpdated', lobby);
    console.log(`Lobby settings updated: ${lobbyCode}`);
  }

  addBot(socket) {
    const lobbyCode = this.playerToLobby.get(socket.id);
    const lobby = this.lobbies.get(lobbyCode);

    if (!lobby) {
      socket.emit('error', { message: 'Lobby not found' });
      return;
    }

    if (lobby.host !== socket.id) {
      socket.emit('error', { message: 'Only the host can add bots' });
      return;
    }

    if (this.games.has(lobbyCode)) {
      socket.emit('error', { message: 'Cannot add bots during game' });
      return;
    }

    this.botCounter++;
    const botNames = [
      'ü§ñ ‡∏ö‡∏≠‡∏ó‡∏≠‡∏±‡∏•‡∏ü‡πà‡∏≤',
      'ü§ñ ‡∏ö‡∏≠‡∏ó‡πÄ‡∏ö‡∏ï‡πâ‡∏≤',
      'ü§ñ ‡∏ö‡∏≠‡∏ó‡πÅ‡∏Å‡∏°‡∏°‡πà‡∏≤',
      'ü§ñ ‡∏ö‡∏≠‡∏ó‡πÄ‡∏î‡∏•‡∏ï‡πâ‡∏≤',
      'ü§ñ ‡∏ö‡∏≠‡∏ó‡πÇ‡∏≠‡πÄ‡∏°‡∏Å‡πâ‡∏≤',
      'ü§ñ ‡∏ö‡∏≠‡∏ó‡∏â‡∏•‡∏≤‡∏î',
      'ü§ñ ‡∏ö‡∏≠‡∏ó‡∏¢‡∏∏‡∏ó‡∏ò‡∏ß‡∏¥‡∏ò‡∏µ',
      'ü§ñ ‡∏ö‡∏≠‡∏ó‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå',
      'ü§ñ ‡∏ö‡∏≠‡∏ó‡πÄ‡∏à‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏´‡πå',
      'ü§ñ ‡∏ö‡∏≠‡∏ó‡∏õ‡∏£‡∏≤‡∏ä‡∏ç‡πå',
      'ü§ñ ‡∏ö‡∏≠‡∏ó‡πÄ‡∏â‡∏•‡∏µ‡∏¢‡∏ß',
      'ü§ñ ‡∏ö‡∏≠‡∏ó‡πÄ‡∏Å‡πà‡∏á‡∏Å‡∏≤‡∏à'
    ];

    const botName = botNames[this.botCounter % botNames.length] + ` #${this.botCounter}`;
    const botId = `bot-${nanoid(10)}`;

    const bot = {
      id: botId,
      name: botName,
      ready: true,
      isBot: true
    };

    lobby.players.push(bot);
    this.playerToLobby.set(botId, lobbyCode);

    this.io.to(lobbyCode).emit('lobbyUpdated', lobby);
    console.log(`Bot added: ${botName} to lobby ${lobbyCode}`);
  }

  removeBot(socket, botId) {
    const lobbyCode = this.playerToLobby.get(socket.id);
    const lobby = this.lobbies.get(lobbyCode);

    if (!lobby) {
      socket.emit('error', { message: 'Lobby not found' });
      return;
    }

    if (lobby.host !== socket.id) {
      socket.emit('error', { message: 'Only the host can remove bots' });
      return;
    }

    const bot = lobby.players.find(p => p.id === botId && p.isBot);
    if (!bot) {
      socket.emit('error', { message: 'Bot not found' });
      return;
    }

    lobby.players = lobby.players.filter(p => p.id !== botId);
    this.playerToLobby.delete(botId);

    this.io.to(lobbyCode).emit('lobbyUpdated', lobby);
    console.log(`Bot removed: ${botId} from lobby ${lobbyCode}`);
  }

  joinLobby(socket, lobbyCode, playerName) {
    const lobby = this.lobbies.get(lobbyCode);

    if (!lobby) {
      socket.emit('error', { message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á' });
      return;
    }

    if (this.games.has(lobbyCode)) {
      socket.emit('error', { message: '‡πÄ‡∏Å‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà' });
      return;
    }

    // ‚≠ê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏ï‡πá‡∏°
    if (lobby.players.length >= lobby.maxPlayers) {
      socket.emit('error', { message: `‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß (${lobby.maxPlayers} ‡∏Ñ‡∏ô)` });
      return;
    }

    // ‚≠ê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á
    const existingPlayer = lobby.players.find(p => 
      !p.isBot && p.name.toLowerCase() === playerName.toLowerCase()
    );

    if (existingPlayer) {
      socket.emit('error', { message: `‡∏ä‡∏∑‡πà‡∏≠ "${playerName}" ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô` });
      return;
    }

    const player = {
      id: socket.id,
      name: playerName,
      ready: false,
      isBot: false
    };

    lobby.players.push(player);
    this.playerToLobby.set(socket.id, lobbyCode);
    socket.join(lobbyCode);

    this.io.to(lobbyCode).emit('lobbyUpdated', lobby);
    socket.emit('joinedLobby', { lobbyCode, lobby });
    console.log(`${playerName} joined lobby: ${lobbyCode}`);
  }

  startGame(socket) {
    const lobbyCode = this.playerToLobby.get(socket.id);
    const lobby = this.lobbies.get(lobbyCode);

    if (!lobby) {
      socket.emit('error', { message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á' });
      return;
    }

    if (lobby.host !== socket.id) {
      socket.emit('error', { message: '‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ' });
      return;
    }

    if (lobby.players.length < lobby.minPlayers) {
      socket.emit('error', { message: `‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ ${lobby.minPlayers} ‡∏Ñ‡∏ô` });
      return;
    }

    // ‚≠ê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role distribution (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•)
    const validation = this.validateRoleDistribution(lobby.settings.roleDistribution, lobby.players.length);
    if (!validation.valid) {
      socket.emit('error', { message: validation.message });
      return;
    }

    // ‚≠ê ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á callback ‡πÅ‡∏•‡πâ‡∏ß)
    const game = new Game(lobbyCode, lobby.players, this.io, lobby.settings);
    this.games.set(lobbyCode, game);
    game.start();

    console.log(`Game started in lobby: ${lobbyCode}`);
  }

  handleNightAction(socket, action) {
    const lobbyCode = this.playerToLobby.get(socket.id);
    const game = this.games.get(lobbyCode);

    if (game) {
      game.handleNightAction(socket.id, action);
    }
  }

  handleVote(socket, targetId) {
    const lobbyCode = this.playerToLobby.get(socket.id);
    const game = this.games.get(lobbyCode);

    if (game) {
      game.handleVote(socket.id, targetId);
    }
  }

  handleSkipVote(socket) {
    const lobbyCode = this.playerToLobby.get(socket.id);
    const game = this.games.get(lobbyCode);

    if (game) {
      game.handleSkipVote(socket.id);
    }
  }

  handleHunterShoot(socket, targetId) {
    const lobbyCode = this.playerToLobby.get(socket.id);
    const game = this.games.get(lobbyCode);
    
    if (game) {
      game.handleHunterShoot(socket.id, targetId);
    }
  }

  // ‚≠ê ‡πÅ‡∏ä‡∏ó‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤
  handleRoleAcknowledge(socket) {
    const lobbyCode = this.playerToLobby.get(socket.id);
    const game = this.games.get(lobbyCode);

    if (game) {
      game.acknowledgeRole(socket.id);
    }
  }

  handleWerewolfChat(socket, message) {
    const lobbyCode = this.playerToLobby.get(socket.id);
    const game = this.games.get(lobbyCode);

    if (game) {
      const player = game.players.find(p => p.id === socket.id);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤ (‡∏£‡∏ß‡∏°‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏¢‡∏®)
      if (player && game.isWerewolfTeam(player.role)) {
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ó‡∏µ‡∏°‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô (‡∏£‡∏ß‡∏°‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏¢‡∏®)
        const werewolfTeam = game.players.filter(p => game.isWerewolfTeam(p.role));
        
        werewolfTeam.forEach(wolf => {
          if (!wolf.isBot) {
            this.io.to(wolf.id).emit('werewolfChatMessage', {
              playerName: player.name,
              playerId: player.id,
              message,
              timestamp: Date.now()
            });
          }
        });
      }
    }
  }

  handleChatMessage(socket, message) {
    const lobbyCode = this.playerToLobby.get(socket.id);
    const game = this.games.get(lobbyCode);

    if (game) {
      const player = game.players.find(p => p.id === socket.id);
      if (player) {
        this.io.to(lobbyCode).emit('chatMessage', {
          playerName: player.name,
          playerId: player.id,
          message,
          timestamp: Date.now()
        });
      }
    } else {
      const lobby = this.lobbies.get(lobbyCode);
      if (lobby) {
        const player = lobby.players.find(p => p.id === socket.id);
        if (player) {
          this.io.to(lobbyCode).emit('chatMessage', {
            playerName: player.name,
            playerId: player.id,
            message,
            timestamp: Date.now()
          });
        }
      }
    }
  }

  endGame(lobbyCode) {
    const game = this.games.get(lobbyCode);
    const lobby = this.lobbies.get(lobbyCode);

    if (!game || !lobby) return;

    // ‡∏•‡∏ö‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
    this.games.delete(lobbyCode);

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï lobby ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≠
    // ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏£‡∏¥‡∏á (‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡∏ö‡∏≠‡∏ó)
    const humanPlayers = lobby.players.filter(p => !p.isBot);
    
    lobby.players = humanPlayers.map(p => ({
      ...p,
      ready: p.id === lobby.host // host ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    }));

    // ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ lobby
    this.io.to(lobbyCode).emit('backToLobby', { lobby });
    console.log(`Game ended, lobby ${lobbyCode} reset for new game`);
  }

  rejoinLobby(socket) {
    const lobbyCode = this.playerToLobby.get(socket.id);
    const lobby = this.lobbies.get(lobbyCode);

    if (!lobby) {
      socket.emit('error', { message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á' });
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ player ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const player = lobby.players.find(p => p.id === socket.id);
    
    if (!player) {
      socket.emit('error', { message: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ' });
      return;
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• lobby ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    socket.emit('joinedLobby', { lobbyCode, lobby });
    this.io.to(lobbyCode).emit('lobbyUpdated', lobby);
    console.log(`${player.name} rejoined lobby: ${lobbyCode}`);
  }

  returnToLobby(socket) {
    const lobbyCode = this.playerToLobby.get(socket.id);
    const lobby = this.lobbies.get(lobbyCode);
    const game = this.games.get(lobbyCode);

    if (!lobby || !lobbyCode) {
      socket.emit('error', { message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á' });
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏Å‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!game) {
      socket.emit('error', { message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà' });
      return;
    }

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å endGame ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï lobby ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏Å‡∏•‡∏±‡∏ö
    this.endGame(lobbyCode);
    console.log(`‚úÖ Player requested return to lobby ${lobbyCode}`);
  }

  // ‚≠ê ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏Ç‡∏≠‡∏á Witch ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
  sendWitchPotions(socket) {
    const lobbyCode = this.playerToLobby.get(socket.id);
    const game = this.games.get(lobbyCode);

    if (!game) {
      socket.emit('error', { message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà' });
      return;
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏Ç‡∏≠‡∏á Witch ‡∏à‡∏≤‡∏Å game
    const witchPotions = game.witchPotions?.get(socket.id);
    
    if (witchPotions) {
      socket.emit('witchPotionsUpdate', witchPotions);
    }
  }

  handleDisconnect(socket) {
    const lobbyCode = this.playerToLobby.get(socket.id);
    
    if (lobbyCode) {
      const lobby = this.lobbies.get(lobbyCode);
      const game = this.games.get(lobbyCode);

      if (game) {
        game.handlePlayerDisconnect(socket.id);
      } else if (lobby) {
        lobby.players = lobby.players.filter(p => p.id !== socket.id);
        
        if (lobby.players.length === 0) {
          this.lobbies.delete(lobbyCode);
        } else {
          if (lobby.host === socket.id) {
            lobby.host = lobby.players[0].id;
          }
          this.io.to(lobbyCode).emit('lobbyUpdated', lobby);
        }
      }

      this.playerToLobby.delete(socket.id);
    }
  }

  // ‚≠ê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role distribution
  validateRoleDistribution(roleDistribution, playerCount) {
    let totalRoles = 0;
    let werewolfCount = 0;
    let villagerCount = 0;
    
    Object.entries(roleDistribution).forEach(([role, count]) => {
      if (count > 0) {
        totalRoles += count;
        
        // ‡∏ô‡∏±‡∏ö‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô
        if (role === '‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô') {
          villagerCount += count;
        }
        
        // ‡∏ô‡∏±‡∏ö‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤
        if (role === '‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤' || role === '‡∏≠‡∏±‡∏•‡∏ü‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤' || 
            role === '‡∏•‡∏π‡∏Å‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤' || role === '‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏¢‡∏®') {
          werewolfCount += count;
        }
      }
    });
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 1: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô roles ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    if (totalRoles !== playerCount) {
      return {
        valid: false,
        message: `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô role ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (${totalRoles}) ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (${playerCount})`
      };
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 2: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ï‡∏±‡∏ß
    if (werewolfCount === 0) {
      return {
        valid: false,
        message: '‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ï‡∏±‡∏ß'
      };
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 3: ‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 40% ‡∏Ç‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (‡∏™‡∏°‡∏î‡∏∏‡∏•)
    const maxWerewolves = Math.ceil(playerCount * 0.4);
    if (werewolfCount > maxWerewolves) {
      return {
        valid: false,
        message: `‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (${werewolfCount}/${maxWerewolves}) ‡πÄ‡∏Å‡∏°‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•`
      };
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 4: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏ô
    if (villagerCount === 0) {
      return {
        valid: false,
        message: '‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ä‡∏≤‡∏ß‡∏ö‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏ô'
      };
    }
    
    return { valid: true };
  }
}

